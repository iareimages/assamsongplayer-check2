"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useSupabaseData.ts":
/*!**********************************!*\
  !*** ./hooks/useSupabaseData.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSupabaseData: function() { return /* binding */ useSupabaseData; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction useSupabaseData() {\n    // Caches for songs and liked songs to avoid repeated cloud fetches\n    const songsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const likedSongsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [songs, setSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Personalized songs state (smart sorted, filtered, and history-excluded)\n    const [personalizedSongs, setPersonalizedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Trending songs state (top 15 by views+likes)\n    const [trendingSongs, setTrendingSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [playlists, setPlaylists] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [likedSongs, setLikedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Set());\n    const [lastPlayedSong, setLastPlayedSong] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [recentlyPlayedSongs, setRecentlyPlayedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentSongStartTime, setCurrentSongStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const currentSongRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Get user ID from localStorage\n    const getUserId = ()=>{\n        try {\n            const userId = localStorage.getItem(\"user_id\");\n            console.log(\"\\uD83D\\uDCF1 Getting user ID from localStorage:\", userId);\n            return userId;\n        } catch (error) {\n            console.error(\"Error getting user ID:\", error);\n            return null;\n        }\n    };\n    // Get personalized songs based on user's actual listening preferences\n    const getSmartPersonalizedSongs = async (userId, listenedSongsInBatch, excludeSongs)=>{\n        try {\n            var _listenedSongsInBatch_;\n            console.log(\"\\uD83E\\uDDE0 Fetching smart personalized songs based on listening behavior\");\n            console.log(\"\\uD83C\\uDFB5 Songs user actually listened to:\", listenedSongsInBatch.map((s)=>s.name));\n            if (listenedSongsInBatch.length === 0) {\n                console.log(\"⚠️ No listened songs in batch, falling back to regular personalization\");\n                return [];\n            }\n            // Extract tags and artists from listened songs\n            const preferredTags = new Set();\n            const preferredArtists = new Set();\n            listenedSongsInBatch.forEach((song)=>{\n                var _song_tags;\n                (_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.forEach((tag)=>preferredTags.add(tag.toLowerCase()));\n                preferredArtists.add(song.artist.toLowerCase());\n            });\n            console.log(\"\\uD83C\\uDFF7️ Preferred tags:\", Array.from(preferredTags));\n            console.log(\"\\uD83C\\uDFA4 Preferred artists:\", Array.from(preferredArtists));\n            // Use cache if available, otherwise fetch and cache\n            let songsData = songsCache.current;\n            if (!songsData) {\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\");\n                if (error) {\n                    console.error(\"❌ Error fetching songs for smart personalization:\", error);\n                    return [];\n                }\n                if (!data || data.length === 0) {\n                    console.warn(\"⚠️ No songs found in database\");\n                    return [];\n                }\n                songsData = data;\n                songsCache.current = data;\n            }\n            let userLikedSongs = likedSongsCache.current;\n            if (!userLikedSongs) {\n                const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n                userLikedSongs = new Set();\n                if (likedData) {\n                    likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n                }\n                likedSongsCache.current = userLikedSongs;\n            }\n            // Filter and score songs based on listening preferences and language\n            // Use the language of the first listened song as the filter\n            const languageFilter = (_listenedSongsInBatch_ = listenedSongsInBatch[0]) === null || _listenedSongsInBatch_ === void 0 ? void 0 : _listenedSongsInBatch_.language;\n            const availableSongs = songsData.filter((song)=>{\n                return !excludeSongs.has(song.file_id.toString()) && song.language === languageFilter;\n            });\n            console.log(\"\\uD83C\\uDFB5 Available songs for smart recommendations (language: \".concat(languageFilter, \"): \").concat(availableSongs.length));\n            if (availableSongs.length === 0) {\n                console.warn(\"⚠️ No available songs after filtering\");\n                return [];\n            }\n            // Score songs based on user's listening preferences\n            const scoredSongs = availableSongs.map((song)=>{\n                var _song_tags;\n                let score = 0;\n                // High priority: Tag matching with listened songs\n                const songTags = ((_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.map((tag)=>tag.toLowerCase())) || [];\n                const matchingTags = songTags.filter((tag)=>preferredTags.has(tag));\n                score += matchingTags.length * 25; // Higher weight for tag matching\n                // High priority: Artist matching with listened songs\n                if (preferredArtists.has(song.artist.toLowerCase())) {\n                    score += 30; // Higher weight for artist matching\n                }\n                // Medium priority: Same language as listened songs\n                const listenedLanguages = listenedSongsInBatch.map((s)=>s.language);\n                if (listenedLanguages.includes(song.language)) {\n                    score += 15;\n                }\n                // Lower priority: General popularity\n                score += Math.log(1 + (song.likes || 0)) * 2;\n                score += Math.log(1 + (song.views || 0)) * 1;\n                // Bonus for liked songs\n                if (userLikedSongs.has(song.file_id)) {\n                    score += 10;\n                }\n                // Add small randomness to avoid repetition\n                score += Math.random() * 2;\n                return {\n                    song: convertDatabaseSong(song, userLikedSongs.has(song.file_id)),\n                    score\n                };\n            });\n            // Sort by score and return top recommendations\n            const recommendations = scoredSongs.sort((a, b)=>b.score - a.score).slice(0, 15) // Get more songs for variety\n            .map((entry)=>entry.song);\n            console.log(\"\\uD83E\\uDDE0 Smart recommendations based on listening behavior:\", recommendations.slice(0, 5).map((s)=>\"\".concat(s.name, \" by \").concat(s.artist)));\n            return recommendations;\n        } catch (error) {\n            console.error(\"❌ Error in getSmartPersonalizedSongs:\", error);\n            return [];\n        }\n    };\n    // Convert database song to UI song format\n    const convertDatabaseSong = function(dbSong) {\n        let isLiked = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return {\n            file_id: dbSong.file_id,\n            img_id: dbSong.img_id,\n            name: dbSong.name,\n            artist: dbSong.artist,\n            language: dbSong.language,\n            tags: dbSong.tags,\n            views: dbSong.views,\n            likes: dbSong.likes,\n            id: dbSong.file_id.toString(),\n            image: \"https://images.pexels.com/photos/\".concat(dbSong.img_id, \"/pexels-photo-\").concat(dbSong.img_id, \".jpeg?auto=compress&cs=tinysrgb&w=300\"),\n            isLiked\n        };\n    };\n    // Fetch all songs\n    const fetchSongs = async ()=>{\n        const userId = getUserId();\n        console.log(\"\\uD83D\\uDD0D fetchSongs called with userId:\", userId);\n        if (!userId) {\n            console.log(\"❌ No userId found, clearing songs data\");\n            setSongs([]);\n            setPersonalizedSongs([]);\n            setTrendingSongs([]);\n            return;\n        }\n        try {\n            setLoading(true);\n            console.log(\"Fetching all songs from supabase...\");\n            // Test connection first\n            console.log(\"\\uD83D\\uDD17 Testing Supabase connection...\");\n            const { data: testData, error: testError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"count\").limit(1).single();\n            if (testError) {\n                console.error(\"❌ Supabase connection test failed:\", testError);\n                throw new Error(\"Database connection failed: \".concat(testError.message));\n            }\n            console.log(\"✅ Supabase connection successful\");\n            // Fetch songs with simpler query first\n            console.log(\"\\uD83D\\uDCCA Fetching songs data...\");\n            const { data: songsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\").limit(100) // Start with a smaller limit\n            ;\n            if (error) throw error;\n            if (!songsData || songsData.length === 0) {\n                console.warn(\"⚠️ No songs found in database\");\n                setSongs([]);\n                setPersonalizedSongs([]);\n                setTrendingSongs([]);\n                setLoading(false);\n                return;\n            }\n            console.log(\"✅ Fetched songs:\", songsData.length);\n            // Cache the songs data\n            songsCache.current = songsData;\n            // Fetch liked songs\n            console.log(\"❤️ Fetching liked songs...\");\n            let userLikedSongs = new Set();\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n            if (likedData) {\n                userLikedSongs = new Set(likedData.map((item)=>item.song_id));\n                setLikedSongs(userLikedSongs);\n                // Cache liked songs\n                likedSongsCache.current = userLikedSongs;\n            }\n            console.log(\"✅ Fetched liked songs:\", userLikedSongs.size);\n            // Fetch user history (for minutes_listened)\n            console.log(\"\\uD83D\\uDCC8 Fetching user history...\");\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"song_id, minutes_listened, songs(*)\").eq(\"user_id\", userId).order(\"minutes_listened\", {\n                ascending: false\n            }).limit(50) // Limit history to prevent large queries\n            ;\n            if (historyError) {\n                console.warn(\"⚠️ Error fetching history:\", historyError);\n            // Don't throw, continue without history\n            }\n            console.log(\"✅ Fetched user history:\", (historyData === null || historyData === void 0 ? void 0 : historyData.length) || 0);\n            // Get top 15 most listened songs from history\n            const topHistory = (historyData || []).slice(0, 15).filter((h)=>h.songs);\n            // Collect tags and artists from top 15\n            const tagCount = {};\n            const artistCount = {};\n            topHistory.forEach((h)=>{\n                // h.songs may be an array or object, use first if array\n                const songObj = Array.isArray(h.songs) ? h.songs[0] : h.songs;\n                ((songObj === null || songObj === void 0 ? void 0 : songObj.tags) || []).forEach((tag)=>{\n                    const t = tag.toLowerCase();\n                    tagCount[t] = (tagCount[t] || 0) + 1;\n                });\n                if (songObj === null || songObj === void 0 ? void 0 : songObj.artist) {\n                    const a = songObj.artist.toLowerCase();\n                    artistCount[a] = (artistCount[a] || 0) + 1;\n                }\n            });\n            // Find most common tags and artists\n            const commonTags = Object.entries(tagCount).sort((a, b)=>b[1] - a[1]).slice(0, 5).map((param)=>{\n                let [tag] = param;\n                return tag;\n            });\n            const commonArtists = Object.entries(artistCount).sort((a, b)=>b[1] - a[1]).slice(0, 5).map((param)=>{\n                let [artist] = param;\n                return artist;\n            });\n            console.log(\"Found similar tags:\", commonTags);\n            console.log(\"Found similar artists:\", commonArtists);\n            // Songs in history (to exclude for smart sort)\n            const historySongIds = new Set((historyData || []).map((h)=>{\n                var _h_song_id;\n                return (_h_song_id = h.song_id) === null || _h_song_id === void 0 ? void 0 : _h_song_id.toString();\n            }));\n            // Convert all songs\n            const convertedSongs = songsData.map((song)=>convertDatabaseSong(song, userLikedSongs.has(song.file_id)));\n            console.log(\"✅ Converted songs:\", convertedSongs.length);\n            setSongs(convertedSongs); // songs is now all songs, not personalized\n            // Filter out songs in history for personalized sort\n            const filteredSongs = convertedSongs.filter((song)=>!historySongIds.has(song.id));\n            console.log(\"✅ Filtered songs for personalization:\", filteredSongs.length);\n            // Score songs by tag/artist match\n            const scoredSongs = filteredSongs.map((song)=>{\n                let score = 0;\n                // Tag match\n                const songTags = (song.tags || []).map((t)=>t.toLowerCase());\n                score += songTags.filter((t)=>commonTags.includes(t)).length * 10;\n                // Artist match\n                if (song.artist && commonArtists.includes(song.artist.toLowerCase())) {\n                    score += 20;\n                }\n                // Popularity\n                score += (song.views || 0) + (song.likes || 0);\n                return {\n                    song,\n                    score\n                };\n            });\n            // Sort by score descending\n            const personalizedSorted = scoredSongs.sort((a, b)=>b.score - a.score).map((s)=>s.song);\n            setPersonalizedSongs(personalizedSorted);\n            console.log(\"✅ Set personalized songs:\", personalizedSorted.length);\n            // Trending: top 15 by views+likes (from all songs, including history)\n            const trending = [\n                ...convertedSongs\n            ].sort((a, b)=>b.views + b.likes - (a.views + a.likes)).slice(0, 15);\n            setTrendingSongs(trending);\n            console.log(\"✅ Set trending songs:\", trending.length);\n            // Set last played song as before\n            console.log(\"\\uD83C\\uDFB5 Setting last played song...\");\n            const { data: userData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"last_song_file_id\").eq(\"id\", userId).single();\n            if (userData === null || userData === void 0 ? void 0 : userData.last_song_file_id) {\n                const lastSong = convertedSongs.find((song)=>song.file_id === userData.last_song_file_id);\n                if (lastSong) {\n                    setLastPlayedSong(lastSong);\n                    console.log(\"✅ Set last played song:\", lastSong.name);\n                }\n            }\n            console.log(\"\\uD83C\\uDF89 Successfully loaded all data!\");\n        } catch (error) {\n            var _error_message, _error_message1, _error_message2, _error_message3;\n            console.error(\"❌ Error fetching songs:\", error);\n            // Show user-friendly error message\n            if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"connection\")) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"timeout\"))) {\n                console.error(\"\\uD83C\\uDF10 Connection issue detected\");\n            } else if (((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"permission\")) || ((_error_message3 = error.message) === null || _error_message3 === void 0 ? void 0 : _error_message3.includes(\"auth\"))) {\n                console.error(\"\\uD83D\\uDD10 Authentication issue detected\");\n            }\n            setSongs([]);\n            setPersonalizedSongs([]);\n            setTrendingSongs([]);\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Get personalized songs with proper error handling and filtering\n    const getPersonalizedSongs = async (userId, currentSong, listenedSongs)=>{\n        try {\n            console.log(\"\\uD83C\\uDFB5 Fetching personalized songs for:\", currentSong.name);\n            console.log(\"\\uD83C\\uDFB5 Listened songs count:\", (listenedSongs === null || listenedSongs === void 0 ? void 0 : listenedSongs.size) || 0);\n            // 1. Fetch all songs from cache or cloud\n            let songsData = songsCache.current;\n            if (!songsData) {\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\");\n                if (error) {\n                    console.error(\"❌ Error fetching songs for personalization:\", error);\n                    return [];\n                }\n                if (!data || data.length === 0) {\n                    console.warn(\"⚠️ No songs found in database\");\n                    return [];\n                }\n                songsData = data;\n                songsCache.current = data;\n            }\n            // 2. Fetch user's listening history (not cached, as it may change frequently)\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"song_id, minutes_listened\").eq(\"user_id\", userId);\n            if (historyError) {\n                console.error(\"❌ Error fetching history:\", historyError);\n            }\n            const historyMap = new Map();\n            if (historyData) {\n                historyData.forEach((h)=>historyMap.set(h.song_id, h.minutes_listened || 0));\n            }\n            // 3. Get user's liked songs from cache or cloud\n            let userLikedSongs = likedSongsCache.current;\n            if (!userLikedSongs) {\n                const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n                userLikedSongs = new Set();\n                if (likedData) {\n                    likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n                }\n                likedSongsCache.current = userLikedSongs;\n            }\n            // 4. Filter and score songs (add language filter)\n            const languageFilter = currentSong.language;\n            const availableSongs = songsData.filter((song)=>{\n                // Exclude current song\n                if (song.file_id === currentSong.file_id) {\n                    return false;\n                }\n                // Exclude listened songs if provided\n                if (listenedSongs && listenedSongs.has(song.file_id.toString())) {\n                    console.log(\"\\uD83D\\uDEAB Excluding listened song: \".concat(song.name, \" by \").concat(song.artist));\n                    return false;\n                }\n                // Only include songs with the same language as current song\n                if (song.language !== languageFilter) {\n                    return false;\n                }\n                return true;\n            });\n            console.log(\"\\uD83C\\uDFB5 Available songs after filtering (language: \".concat(languageFilter, \"): \").concat(availableSongs.length));\n            if (availableSongs.length === 0) {\n                console.warn(\"⚠️ No available songs after filtering\");\n                return [];\n            }\n            // 5. Score and sort songs\n            const scoredSongs = availableSongs.map((song)=>{\n                var _song_tags;\n                let score = 0;\n                // Tag matching (highest priority)\n                const matchingTags = ((_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.filter((tag)=>{\n                    var _currentSong_tags;\n                    return (_currentSong_tags = currentSong.tags) === null || _currentSong_tags === void 0 ? void 0 : _currentSong_tags.includes(tag);\n                })) || [];\n                score += matchingTags.length * 15;\n                // Artist matching\n                if (song.artist === currentSong.artist) {\n                    score += 25;\n                }\n                // Language matching\n                if (song.language === currentSong.language) {\n                    score += 10;\n                }\n                // Listening history boost\n                const listenedMinutes = historyMap.get(song.file_id) || 0;\n                score += Math.min(listenedMinutes * 2, 20); // Cap at 20 points\n                // Popularity boost (likes and views)\n                score += Math.log(1 + (song.likes || 0)) * 2;\n                score += Math.log(1 + (song.views || 0)) * 1;\n                // Liked songs boost\n                if (userLikedSongs.has(song.file_id)) {\n                    score += 8;\n                }\n                // Add controlled randomness to avoid repetition\n                score += Math.random() * 3;\n                return {\n                    song: convertDatabaseSong(song, userLikedSongs.has(song.file_id)),\n                    score\n                };\n            });\n            // 6. Sort by score and return top recommendations\n            const recommendations = scoredSongs.sort((a, b)=>b.score - a.score).slice(0, 10) // Get more songs to have a buffer\n            .map((entry)=>entry.song);\n            console.log(\"\\uD83C\\uDFB5 Personalized recommendations:\", recommendations.slice(0, 5).map((s)=>\"\".concat(s.name, \" by \").concat(s.artist)));\n            console.log(\"\\uD83C\\uDFB5 Total available songs:\", availableSongs.length);\n            return recommendations;\n        } catch (error) {\n            console.error(\"❌ Error in getPersonalizedSongs:\", error);\n            return [];\n        }\n    };\n    // Fetch recently played songs based on listening history\n    const fetchRecentlyPlayed = async ()=>{\n        const userId = getUserId();\n        if (!userId) {\n            setRecentlyPlayedSongs([]);\n            return;\n        }\n        try {\n            console.log(\"\\uD83D\\uDD0D Fetching recently played songs...\");\n            // Get user's listening history sorted by minutes listened\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"\\n          song_id,\\n          minutes_listened,\\n          songs (*)\\n        \").eq(\"user_id\", userId).order(\"minutes_listened\", {\n                ascending: false\n            }).limit(15) // Increase limit slightly\n            ;\n            if (historyError) {\n                console.warn(\"⚠️ Error fetching recently played:\", historyError);\n                setRecentlyPlayedSongs([]);\n                return;\n            }\n            if (!historyData || historyData.length === 0) {\n                console.log(\"ℹ️ No recently played songs found\");\n                setRecentlyPlayedSongs([]);\n                return;\n            }\n            // Get user's liked songs for proper conversion\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n            const userLikedSongs = new Set();\n            if (likedData) {\n                likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n            }\n            // Convert to Song format\n            const recentSongs = historyData.filter((item)=>item.songs) // Ensure song data exists\n            .map((item)=>{\n                const songObj = Array.isArray(item.songs) ? item.songs[0] : item.songs;\n                return convertDatabaseSong(songObj, userLikedSongs.has(item.song_id));\n            });\n            setRecentlyPlayedSongs(recentSongs);\n            console.log(\"✅ Set recently played songs:\", recentSongs.length);\n        } catch (error) {\n            console.error(\"❌ Error fetching recently played songs:\", error);\n            setRecentlyPlayedSongs([]);\n        }\n    };\n    // Fetch user playlists\n    const fetchPlaylists = async ()=>{\n        const userId = getUserId();\n        if (!userId) {\n            setPlaylists([]);\n            return;\n        }\n        try {\n            console.log(\"\\uD83D\\uDD0D Fetching playlists...\");\n            const { data: playlistsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").select(\"\\n          id,\\n          name,\\n          playlist_songs (\\n            songs (*)\\n          )\\n        \").eq(\"user_id\", userId).limit(20) // Limit playlists to prevent large queries\n            ;\n            if (error) {\n                console.warn(\"⚠️ Error fetching playlists:\", error);\n                setPlaylists([]);\n                return;\n            }\n            if (!playlistsData) {\n                console.log(\"ℹ️ No playlists found\");\n                setPlaylists([]);\n                return;\n            }\n            const convertedPlaylists = (playlistsData === null || playlistsData === void 0 ? void 0 : playlistsData.map((playlist)=>{\n                var _playlist_playlist_songs, _playlistSongs_;\n                const playlistSongs = ((_playlist_playlist_songs = playlist.playlist_songs) === null || _playlist_playlist_songs === void 0 ? void 0 : _playlist_playlist_songs.map((ps)=>convertDatabaseSong(ps.songs, likedSongs.has(ps.songs.file_id)))) || [];\n                return {\n                    id: playlist.id.toString(),\n                    name: playlist.name,\n                    songCount: playlistSongs.length,\n                    image: ((_playlistSongs_ = playlistSongs[0]) === null || _playlistSongs_ === void 0 ? void 0 : _playlistSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                    songs: playlistSongs\n                };\n            })) || [];\n            setPlaylists(convertedPlaylists);\n            console.log(\"✅ Set playlists:\", convertedPlaylists.length);\n        } catch (error) {\n            console.error(\"❌ Error fetching playlists:\", error);\n            setPlaylists([]);\n        }\n    };\n    // Toggle like song\n    const toggleLike = async (songId)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        const songFileId = parseInt(songId);\n        const isCurrentlyLiked = likedSongs.has(songFileId);\n        try {\n            if (isCurrentlyLiked) {\n                // Remove from liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").delete().eq(\"user_id\", userId).eq(\"song_id\", songFileId);\n                if (error) throw error;\n                // Decrement likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"decrement_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>{\n                    const newSet = new Set(prev);\n                    newSet.delete(songFileId);\n                    return newSet;\n                });\n            } else {\n                // Add to liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").insert({\n                    user_id: userId,\n                    song_id: songFileId\n                });\n                if (error) throw error;\n                // Increment likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>new Set(prev).add(songFileId));\n            }\n            // Update songs state\n            setSongs((prevSongs)=>prevSongs.map((song)=>song.id === songId ? {\n                        ...song,\n                        isLiked: !isCurrentlyLiked,\n                        likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                    } : song));\n            // Update playlists state\n            setPlaylists((prevPlaylists)=>prevPlaylists.map((playlist)=>({\n                        ...playlist,\n                        songs: playlist.songs.map((song)=>song.id === songId ? {\n                                ...song,\n                                isLiked: !isCurrentlyLiked,\n                                likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                            } : song)\n                    })));\n        } catch (error) {\n            console.error(\"Error toggling like:\", error);\n        }\n    };\n    // Create playlist\n    const createPlaylist = async (name)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").insert({\n                user_id: userId,\n                name\n            }).select().single();\n            if (error) throw error;\n            const newPlaylist = {\n                id: data.id.toString(),\n                name: data.name,\n                songCount: 0,\n                image: \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                songs: []\n            };\n            setPlaylists((prev)=>[\n                    ...prev,\n                    newPlaylist\n                ]);\n        } catch (error) {\n            console.error(\"Error creating playlist:\", error);\n        }\n    };\n    // Delete playlist\n    const deletePlaylist = async (playlistId)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").delete().eq(\"id\", parseInt(playlistId)).eq(\"user_id\", userId);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.filter((playlist)=>playlist.id !== playlistId));\n        } catch (error) {\n            console.error(\"Error deleting playlist:\", error);\n        }\n    };\n    // Rename playlist\n    const renamePlaylist = async (playlistId, newName)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").update({\n                name: newName\n            }).eq(\"id\", parseInt(playlistId)).eq(\"user_id\", userId);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>playlist.id === playlistId ? {\n                        ...playlist,\n                        name: newName\n                    } : playlist));\n        } catch (error) {\n            console.error(\"Error renaming playlist:\", error);\n        }\n    };\n    // Add song to playlist\n    const addSongToPlaylist = async (playlistId, song)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlist_songs\").insert({\n                playlist_id: parseInt(playlistId),\n                song_id: song.file_id\n            });\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        const songExists = playlist.songs.some((s)=>s.id === song.id);\n                        if (!songExists) {\n                            var _updatedSongs_;\n                            const updatedSongs = [\n                                ...playlist.songs,\n                                song\n                            ];\n                            return {\n                                ...playlist,\n                                songs: updatedSongs,\n                                songCount: updatedSongs.length,\n                                image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || playlist.image\n                            };\n                        }\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error adding song to playlist:\", error);\n        }\n    };\n    // Remove song from playlist\n    const removeSongFromPlaylist = async (playlistId, songId)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlist_songs\").delete().eq(\"playlist_id\", parseInt(playlistId)).eq(\"song_id\", parseInt(songId));\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        var _updatedSongs_;\n                        const updatedSongs = playlist.songs.filter((song)=>song.id !== songId);\n                        return {\n                            ...playlist,\n                            songs: updatedSongs,\n                            songCount: updatedSongs.length,\n                            image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\"\n                        };\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error removing song from playlist:\", error);\n        }\n    };\n    // Update last song in user profile\n    const updateLastSong = async (songId)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").update({\n                last_song_file_id: parseInt(songId)\n            }).eq(\"id\", userId);\n            if (error) throw error;\n        } catch (error) {\n            console.error(\"Error updating last song:\", error);\n        }\n    };\n    // Record listening history with proper time tracking\n    const recordListeningHistory = async (songId)=>{\n        const userId = getUserId();\n        if (!userId) return;\n        // If there's a previous song playing, record its listening time\n        if (currentSongRef.current && currentSongStartTime) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: userId,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history:\", error);\n                    } else {\n                        console.log(\"✅ History updated: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording previous song history:\", error);\n                }\n            }\n        }\n        // Set new song as current\n        currentSongRef.current = songId;\n        setCurrentSongStartTime(new Date());\n        // Update last song in user profile\n        await updateLastSong(songId);\n        try {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_song_views\", {\n                song_file_id: parseInt(songId)\n            });\n        } catch (error) {\n            console.error(\"Error incrementing song views:\", error);\n        }\n    };\n    // Stop current song tracking (when player is closed)\n    const stopCurrentSongTracking = async ()=>{\n        const userId = getUserId();\n        if (currentSongRef.current && currentSongStartTime && userId) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: userId,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history on stop:\", error);\n                    } else {\n                        console.log(\"\\uD83D\\uDED1 History updated on stop: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording final song history:\", error);\n                }\n            }\n        }\n        currentSongRef.current = null;\n        setCurrentSongStartTime(null);\n    };\n    // Initialize data when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDE80 useSupabaseData useEffect triggered\");\n        const userId = getUserId();\n        console.log(\"\\uD83D\\uDC64 Current userId in useEffect:\", userId);\n        if (userId) {\n            const loadData = async ()=>{\n                try {\n                    console.log(\"\\uD83D\\uDCCA Loading data for user:\", userId);\n                    // Load songs first, then other data\n                    await fetchSongs();\n                    await Promise.all([\n                        fetchPlaylists(),\n                        fetchRecentlyPlayed()\n                    ]);\n                } catch (error) {\n                    console.error(\"❌ Error loading data:\", error);\n                }\n            };\n            loadData();\n        } else {\n            console.log(\"\\uD83D\\uDEAB No user found, resetting data\");\n            // Reset data when no user\n            songsCache.current = null;\n            likedSongsCache.current = null;\n            setSongs([]);\n            setPersonalizedSongs([]);\n            setTrendingSongs([]);\n            setPlaylists([]);\n            setLikedSongs(new Set());\n            setRecentlyPlayedSongs([]);\n            setLastPlayedSong(null);\n            setLoading(false);\n        }\n    }, []) // Remove dependency to avoid infinite loops\n    ;\n    // Also listen for storage changes (when user logs in/out in another tab)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleStorageChange = (e)=>{\n            if (e.key === \"user_id\") {\n                const userId = e.newValue;\n                if (userId) {\n                    console.log(\"\\uD83D\\uDD04 Storage change detected - user logged in:\", userId);\n                    setLoading(true);\n                    const loadData = async ()=>{\n                        try {\n                            await fetchSongs();\n                            await Promise.all([\n                                fetchPlaylists(),\n                                fetchRecentlyPlayed()\n                            ]);\n                        } catch (error) {\n                            console.error(\"❌ Error loading data after storage change:\", error);\n                        } finally{\n                            setLoading(false);\n                        }\n                    };\n                    loadData();\n                } else {\n                    // User logged out\n                    console.log(\"\\uD83D\\uDEAA Storage change detected - user logged out\");\n                    songsCache.current = null;\n                    likedSongsCache.current = null;\n                    setSongs([]);\n                    setPersonalizedSongs([]);\n                    setTrendingSongs([]);\n                    setPlaylists([]);\n                    setLikedSongs(new Set());\n                    setRecentlyPlayedSongs([]);\n                    setLastPlayedSong(null);\n                    setLoading(false);\n                }\n            }\n        };\n        window.addEventListener(\"storage\", handleStorageChange);\n        return ()=>window.removeEventListener(\"storage\", handleStorageChange);\n    }, []);\n    // Add a separate effect to watch for user changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const checkAndLoadData = ()=>{\n            const userId = getUserId();\n            console.log(\"\\uD83D\\uDD04 User check effect triggered, userId:\", userId);\n            if (userId && songs.length === 0 && !loading) {\n                console.log(\"\\uD83D\\uDCCA User found but no songs loaded, loading data...\");\n                const loadData = async ()=>{\n                    try {\n                        await Promise.all([\n                            fetchSongs(),\n                            fetchPlaylists(),\n                            fetchRecentlyPlayed()\n                        ]);\n                    } catch (error) {\n                        console.error(\"Error loading data:\", error);\n                    }\n                };\n                loadData();\n            }\n        };\n        checkAndLoadData();\n    }, [\n        songs.length,\n        loading\n    ]);\n    return {\n        songs,\n        personalizedSongs,\n        trendingSongs,\n        playlists,\n        likedSongs: songs.filter((song)=>song.isLiked),\n        recentlyPlayedSongs,\n        lastPlayedSong,\n        loading,\n        toggleLike,\n        createPlaylist,\n        deletePlaylist,\n        renamePlaylist,\n        addSongToPlaylist,\n        removeSongFromPlaylist,\n        recordListeningHistory,\n        stopCurrentSongTracking,\n        refreshData: ()=>{\n            const userId = getUserId();\n            if (userId) {\n                console.log(\"\\uD83D\\uDD04 Refreshing data...\");\n                setLoading(true);\n                const loadData = async ()=>{\n                    try {\n                        // Clear caches\n                        songsCache.current = null;\n                        likedSongsCache.current = null;\n                        await fetchSongs();\n                        await Promise.all([\n                            fetchPlaylists(),\n                            fetchRecentlyPlayed()\n                        ]);\n                    } catch (error) {\n                        console.error(\"❌ Error refreshing data:\", error);\n                    } finally{\n                        setLoading(false);\n                    }\n                };\n                loadData();\n            }\n        },\n        getPersonalizedSongs,\n        getSmartPersonalizedSongs\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useSupabaseData.ts\n"));

/***/ })

});